"use strict";(()=>{var e={};e.id=5664,e.ids=[5664],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},57147:e=>{e.exports=require("fs")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},41808:e=>{e.exports=require("net")},22037:e=>{e.exports=require("os")},71017:e=>{e.exports=require("path")},4074:e=>{e.exports=require("perf_hooks")},12781:e=>{e.exports=require("stream")},24404:e=>{e.exports=require("tls")},57310:e=>{e.exports=require("url")},59796:e=>{e.exports=require("zlib")},57316:(e,t,n)=>{n.r(t),n.d(t,{headerHooks:()=>R,originalPathname:()=>C,requestAsyncStorage:()=>N,routeModule:()=>I,serverHooks:()=>O,staticGenerationAsyncStorage:()=>T,staticGenerationBailout:()=>b});var o,i,r={};n.r(r),n.d(r,{GET:()=>GET,POST:()=>POST});var s=n(10884),a=n(16132),c=n(27418),p=n(37058),l=n(786),h=n(94192),u=n(68332),g=n(14333);let m=process.env.N8N_URL||"http://localhost:5678",d=process.env.N8N_API_KEY||"",y=`${m}/webhook`,_={ENTITY_ENRICHMENT:process.env.N8N_ENTITY_ENRICHMENT_ID||"entity-enrichment",PERSON_LOOKUP:process.env.N8N_PERSON_LOOKUP_ID||"person-lookup",COMPANY_ENRICHMENT:process.env.N8N_COMPANY_ENRICHMENT_ID||"company-enrichment",CRM_SYNC:process.env.N8N_CRM_SYNC_ID||"crm-sync",EMAIL_FINDER:process.env.N8N_EMAIL_FINDER_ID||"email-finder",SOCIAL_PROFILE_LOOKUP:process.env.N8N_SOCIAL_PROFILE_ID||"social-profile",RELATIONSHIP_ANALYZER:process.env.N8N_RELATIONSHIP_ANALYZER_ID||"relationship-analyzer",INTRODUCTION_DRAFTER:process.env.N8N_INTRODUCTION_DRAFTER_ID||"introduction-drafter",FOLLOW_UP_SCHEDULER:process.env.N8N_FOLLOW_UP_SCHEDULER_ID||"follow-up-scheduler"};!function(e){e.NEW_PERSON_DETECTED="new_person_detected",e.NEW_COMPANY_DETECTED="new_company_detected",e.MISSING_EMAIL="missing_email",e.MISSING_LINKEDIN="missing_linkedin",e.INTERVIEW_COMPLETED="interview_completed",e.ENTITIES_EXTRACTED="entities_extracted",e.GOAL_IDENTIFIED="goal_identified",e.CONNECTION_REQUEST="connection_request",e.INTRODUCTION_NEEDED="introduction_needed",e.FOLLOW_UP_DUE="follow_up_due",e.SYNC_TO_CRM="sync_to_crm",e.UPDATE_CRM_CONTACT="update_crm_contact",e.CREATE_CRM_OPPORTUNITY="create_crm_opportunity"}(o||(o={}));let N8NClient=class N8NClient{constructor(){this.baseUrl=m,this.apiKey=d}async triggerWorkflow(e,t,n,o){try{let i=`${y}/${e}`,r={workflowId:e,trigger:t,data:n,metadata:{...o,timestamp:new Date().toISOString()}};g.k.info("Triggering n8n workflow",{component:"n8n-client",workflowId:e,trigger:t,webhookUrl:i});let s=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json",...this.apiKey&&{"X-N8N-API-KEY":this.apiKey}},body:JSON.stringify(r)});if(!s.ok)throw Error(`n8n webhook failed: ${s.statusText}`);let a=await s.json();return{success:!0,executionId:a.executionId,data:a.data}}catch(n){return g.k.error("n8n workflow trigger failed",n,{component:"n8n-client",workflowId:e,trigger:t}),{success:!1,error:n.message}}}async enrichPerson(e,t){return this.triggerWorkflow(_.PERSON_LOOKUP,"new_person_detected",e,t)}async enrichCompany(e,t){return this.triggerWorkflow(_.COMPANY_ENRICHMENT,"new_company_detected",e,t)}async findEmail(e,t){return this.triggerWorkflow(_.EMAIL_FINDER,"missing_email",e,t)}async findSocialProfiles(e,t){return this.triggerWorkflow(_.SOCIAL_PROFILE_LOOKUP,"missing_linkedin",e,t)}async syncToCRM(e,t){return this.triggerWorkflow(_.CRM_SYNC,"sync_to_crm",e,t)}async analyzeRelationships(e,t){return this.triggerWorkflow(_.RELATIONSHIP_ANALYZER,"connection_request",e,t)}async draftIntroduction(e,t){return this.triggerWorkflow(_.INTRODUCTION_DRAFTER,"introduction_needed",e,t)}async scheduleFollowUp(e,t){return this.triggerWorkflow(_.FOLLOW_UP_SCHEDULER,"follow_up_due",e,t)}async processInterviewEntities(e,t){return this.triggerWorkflow(_.ENTITY_ENRICHMENT,"interview_completed",e,t)}async checkHealth(){try{let e=await fetch(`${this.baseUrl}/healthz`,{method:"GET",headers:this.apiKey?{"X-N8N-API-KEY":this.apiKey}:{}});return e.ok}catch(e){return g.k.error("n8n health check failed",e,{component:"n8n-client"}),!1}}async getExecutionStatus(e){try{let t=await fetch(`${this.baseUrl}/api/executions/${e}`,{method:"GET",headers:{"Content-Type":"application/json",...this.apiKey&&{"X-N8N-API-KEY":this.apiKey}}});if(!t.ok)throw Error(`Failed to get execution status: ${t.statusText}`);return await t.json()}catch(t){return g.k.error("Failed to get execution status",t,{component:"n8n-client",executionId:e}),null}}};let w=new N8NClient;!function(e){e.GREETING="greeting",e.CONTEXT_GATHERING="context_gathering",e.RELATIONSHIP_MAPPING="relationship_mapping",e.GOAL_DISCOVERY="goal_discovery",e.DEEP_DIVE="deep_dive",e.WRAP_UP="wrap_up"}(i||(i={}));let f={greeting:["Hi! I'm here to help you capture and leverage your relationships. What brings you here today?","Tell me about a recent meeting or conversation you'd like to capture.","What's on your mind regarding your professional network?"],context_gathering:["Can you tell me more about {topic}?","What was the context of your interaction with {person}?","How did you meet {person}?","What project or initiative brought you together?"],relationship_mapping:["How would you describe your relationship with {person}?","Who else was involved in {context}?","Does {person} know anyone who might be helpful for {goal}?","What's {person}'s role at {company}?","How strong would you say your connection is with {person}?"],goal_discovery:["What are you hoping to achieve in the next few months?","What kind of introductions would be most valuable to you right now?","Are you looking to hire, raise funding, or find customers?","What's blocking you from reaching {goal}?","Who would be the ideal person to help with {goal}?"],deep_dive:["Tell me more about {person}'s background and expertise.","What specific skills or connections does {person} have?","Have you discussed {goal} with {person}?","What did {person} say about {topic}?","Would {person} be open to making an introduction?"],wrap_up:["Is there anything else about {person} I should know?","Any other people from this {context} worth noting?","Would you like me to suggest some introductions based on what we discussed?","Should I set up any follow-up reminders?"]},x={person_role_missing:"What does {person} do professionally?",person_company_missing:"Where does {person} work?",relationship_unclear:"How do you know {person}?",goal_timeframe_missing:"When are you hoping to achieve {goal}?"};let InterviewAgent=class InterviewAgent{constructor(){this.model=p.Cq.gpt4,this.context=this.initializeContext()}initializeContext(){return{stage:"greeting",transcript:[],entities:{people:new Map,organizations:new Map,goals:[]},questionsAsked:[],followUpQueue:[]}}async processUserInput(e){try{this.context.transcript.push(`User: ${e}`),await this.extractEntities(e),this.updateStage();let t=await this.generateResponse(e),n=await this.generateNextQuestion(),o=this.shouldEndInterview();return{response:t,nextQuestion:n,entities:this.context.entities,shouldEndInterview:o}}catch(e){throw g.k.error("Interview processing error:",e),e}}async extractEntities(e){let t=`
      Extract entities from this conversational input:
      "${e}"
      
      Previous context:
      ${this.context.transcript.slice(-5).join("\n")}
      
      Currently known people: ${Array.from(this.context.entities.people.keys()).join(", ")}
      Currently known organizations: ${Array.from(this.context.entities.organizations.keys()).join(", ")}
      
      Extract:
      1. People mentioned (names, roles, companies)
      2. Organizations mentioned
      3. Goals or objectives
      4. Relationships between people
      5. Any specific expertise or skills mentioned
    `,{object:n}=await (0,h.jA)({model:this.model,prompt:t,schema:u.Ry({people:u.IX(u.Ry({name:u.Z_(),role:u.Z_().optional(),company:u.Z_().optional(),relationship:u.Z_().optional(),expertise:u.IX(u.Z_()).optional()})).optional(),organizations:u.IX(u.Ry({name:u.Z_(),industry:u.Z_().optional(),relationship:u.Z_().optional()})).optional(),goals:u.IX(u.Ry({type:u.Z_(),description:u.Z_(),timeframe:u.Z_().optional(),relatedPeople:u.IX(u.Z_()).optional()})).optional()})});n.people&&n.people.forEach(t=>{let n=this.context.entities.people.get(t.name)||{name:t.name,context:[],lastMentioned:new Date},o={...n,...t,context:[...n.context,e],lastMentioned:new Date};this.context.entities.people.set(t.name,o),n.role&&n.company||this.triggerPersonEnrichment(o)}),n.organizations&&n.organizations.forEach(t=>{let n=this.context.entities.organizations.get(t.name)||{name:t.name,context:[]},o={...n,...t,context:[...n.context,e]};this.context.entities.organizations.set(t.name,o),n.industry&&n.size||this.triggerCompanyEnrichment(o)}),n.goals&&this.context.entities.goals.push(...n.goals)}updateStage(){let{people:e,goals:t}=this.context.entities,n=this.context.transcript.length;n<=2?this.context.stage="greeting":0===e.size&&0===t.length?this.context.stage="context_gathering":e.size>0&&e.size<3?this.context.stage="relationship_mapping":0===t.length?this.context.stage="goal_discovery":(e.size>=3||t.length>0)&&(this.context.stage="deep_dive"),(n>15||e.size>5&&t.length>2)&&(this.context.stage="wrap_up")}async generateResponse(e){let t=`
      You are an intelligent interview assistant helping to capture relationship and networking information.
      Current stage: ${this.context.stage}
      Known people: ${Array.from(this.context.entities.people.values()).map(e=>`${e.name} (${e.role} at ${e.company})`).join(", ")}
      Known goals: ${this.context.entities.goals.map(e=>e.description).join(", ")}
      
      Respond naturally and conversationally to acknowledge what the user said.
      Be encouraging and show interest in their relationships and goals.
      Keep responses concise (1-2 sentences).
    `,{text:n}=await (0,h._4)({model:this.model,system:t,prompt:e});return this.context.transcript.push(`Assistant: ${n}`),n}async generateNextQuestion(){if(this.context.followUpQueue.length>0)return this.context.followUpQueue.shift();let e=this.identifyMissingInformation();if(e)return e;let t=f[this.context.stage],n=t.filter(e=>!this.context.questionsAsked.includes(e));if(0===n.length)return;let o=n[0];return o=this.personalizeQuestion(o),this.context.questionsAsked.push(o),o}identifyMissingInformation(){for(let[e,t]of this.context.entities.people){if(!t.role)return x.person_role_missing.replace("{person}",e);if(!t.company)return x.person_company_missing.replace("{person}",e);if(!t.relationship)return x.relationship_unclear.replace("{person}",e)}for(let e of this.context.entities.goals)if(!e.timeframe)return x.goal_timeframe_missing.replace("{goal}",e.description)}personalizeQuestion(e){let t=Array.from(this.context.entities.people.keys()),n=Array.from(this.context.entities.organizations.keys()),o=this.context.entities.goals.map(e=>e.description),i=e;if(e.includes("{person}")&&t.length>0){let e=Array.from(this.context.entities.people.values()).sort((e,t)=>t.lastMentioned.getTime()-e.lastMentioned.getTime())[0];i=i.replace("{person}",e.name)}if(e.includes("{company}")&&n.length>0&&(i=i.replace("{company}",n[n.length-1])),e.includes("{goal}")&&o.length>0&&(i=i.replace("{goal}",o[o.length-1])),e.includes("{topic}")&&(i=i.replace("{topic}",this.context.currentTopic||"that")),e.includes("{context}")){let e=this.context.transcript[this.context.transcript.length-1],t=e.match(/meeting|conversation|call|lunch|coffee|event/i);i=i.replace("{context}",t?t[0]:"interaction")}return i}shouldEndInterview(){if("wrap_up"===this.context.stage){let e=this.context.questionsAsked.filter(e=>f.wrap_up.includes(e)).length;return e>=2}return this.context.transcript.length>30}async getSummary(){let e=Array.from(this.context.entities.people.values()),t=Array.from(this.context.entities.organizations.values()),n=this.context.entities.goals,o=`
## Interview Summary

### People Mentioned (${e.length})
${e.map(e=>`- **${e.name}**: ${e.role||"Unknown role"} at ${e.company||"Unknown company"}`).join("\n")}

### Organizations (${t.length})
${t.map(e=>`- **${e.name}**: ${e.industry||"Unknown industry"}`).join("\n")}

### Goals Identified (${n.length})
${n.map(e=>`- ${e.description} (${e.timeframe||"No timeframe specified"})`).join("\n")}

### Key Relationships
${e.filter(e=>e.relationship).map(e=>`- ${e.name}: ${e.relationship}`).join("\n")}
    `;return o.trim()}reset(){this.context=this.initializeContext()}getContext(){return this.context}loadContext(e){this.context=e}async triggerPersonEnrichment(e){try{await w.enrichPerson({name:e.name,email:void e.relationship,company:e.company,role:e.role},{priority:"medium",callback:"/api/webhooks/n8n"}),g.k.info("Triggered person enrichment",{component:"interview-agent",person:e.name})}catch(t){g.k.error("Failed to trigger person enrichment",t,{component:"interview-agent",person:e.name})}}async triggerCompanyEnrichment(e){try{await w.enrichCompany({name:e.name,industry:e.industry},{priority:"low",callback:"/api/webhooks/n8n"}),g.k.info("Triggered company enrichment",{component:"interview-agent",company:e.name})}catch(t){g.k.error("Failed to trigger company enrichment",t,{component:"interview-agent",company:e.name})}}async triggerInterviewProcessing(e){try{let t=await this.getSummary();await w.processInterviewEntities({conversationId:e?.conversationId||"unknown",entities:{people:Array.from(this.context.entities.people.values()),organizations:Array.from(this.context.entities.organizations.values()),goals:this.context.entities.goals},transcript:this.context.transcript,summary:t},{...e,priority:"high",callback:"/api/webhooks/n8n"}),g.k.info("Triggered comprehensive interview processing",{component:"interview-agent",peopleCount:this.context.entities.people.size,orgsCount:this.context.entities.organizations.size,goalsCount:this.context.entities.goals.length})}catch(e){g.k.error("Failed to trigger interview processing",e,{component:"interview-agent"})}}async triggerRelationshipAnalysis(e){let t=Array.from(this.context.entities.people.values());if(!(t.length<2)&&0!==this.context.entities.goals.length)try{for(let n=0;n<t.length;n++)for(let o=n+1;o<t.length;o++)await w.analyzeRelationships({person1:t[n],person2:t[o],context:this.context.transcript.join(" "),goals:this.context.entities.goals},{...e,priority:"medium",callback:"/api/webhooks/n8n"});g.k.info("Triggered relationship analysis",{component:"interview-agent",pairCount:t.length*(t.length-1)/2})}catch(e){g.k.error("Failed to trigger relationship analysis",e,{component:"interview-agent"})}}async triggerEmailFinding(e){let t=Array.from(this.context.entities.people.values()).filter(e=>!e.relationship?.includes("email")&&e.company);for(let n of t)try{await w.findEmail({name:n.name,company:n.company},{...e,priority:"low",callback:"/api/webhooks/n8n"})}catch(e){g.k.error("Failed to trigger email finding",e,{component:"interview-agent",person:n.name})}}};var v=n(37552),E=n(1345);let k=null;function initWebSocketServer(){return k||(k=new c.u9({noServer:!0})).on("connection",(e,t)=>{g.k.info("WebSocket client connected",{component:"voice-stream"});let n=[],o=!1,i=null,r=new InterviewAgent;e.on("message",async t=>{try{let s=JSON.parse(t.toString());switch(s.type){case"audio_chunk":let a=Buffer.from(s.data,"base64");if(n.push(a),n.length>=20&&!o){o=!0;try{let t=Buffer.concat(n);n=[];let o=await (0,p.KR)(t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength));if(e.send(JSON.stringify({type:"transcription",text:o,timestamp:Date.now()})),o.trim().length>10){let t=await r.processUserInput(o),n=t.response;t.nextQuestion&&!t.shouldEndInterview&&(n+=" "+t.nextQuestion);let s={text:n,cards:null,entities:t.entities};if(e.send(JSON.stringify({type:"ai_response",text:s.text,cards:s.cards,timestamp:Date.now()})),s.text){let t=await (0,l.FI)(s.text);e.send(JSON.stringify({type:"audio_response",audio:t.toString("base64"),timestamp:Date.now()}))}i?await updateEntitiesToDatabase(i,s.entities):(i=crypto.randomUUID(),await saveConversationToDatabase(i,o,s))}}catch(t){g.k.error("Error processing audio chunk",t,{component:"voice-stream"}),e.send(JSON.stringify({type:"error",error:"Failed to process audio",timestamp:Date.now()}))}finally{o=!1}}break;case"start_conversation":i=crypto.randomUUID(),r.reset(),n=[],e.send(JSON.stringify({type:"conversation_started",encounterId:i,timestamp:Date.now()}));break;case"end_conversation":if(i){let e=await r.getSummary();await finalizeConversation(i,e)}e.send(JSON.stringify({type:"conversation_ended",timestamp:Date.now()}));break;default:g.k.warn("Unknown message type",{component:"voice-stream",type:s.type})}}catch(t){g.k.error("Error processing WebSocket message",t,{component:"voice-stream"}),e.send(JSON.stringify({type:"error",error:"Failed to process message",timestamp:Date.now()}))}}),e.on("close",()=>{g.k.info("WebSocket client disconnected",{component:"voice-stream"}),i&&(async()=>{let e=await r.getSummary();await finalizeConversation(i,e)})().catch(e=>{g.k.error("Error finalizing conversation",e,{component:"voice-stream"})})}),e.on("error",e=>{g.k.error("WebSocket error",e,{component:"voice-stream"})})}),k}async function saveConversationToDatabase(e,t,n){try{let e=await (0,E.n5)();if(!e)return;await v.db.insert(v.qU).values({workspaceId:"default",ownerId:e,kind:"voice_conversation",summary:t.substring(0,100)+"...",occurredAt:new Date,raw:{transcript:t}}),await (0,p.iS)(t,p.Ax.people,"Extract all people mentioned in this conversation.")}catch(e){g.k.error("Error saving conversation to database",e,{component:"voice-stream"})}}async function updateEntitiesToDatabase(e,t){try{g.k.info("Updating entities in database",{component:"voice-stream",encounterId:e,entitiesCount:Object.keys(t).length})}catch(e){g.k.error("Error updating conversation in database",e,{component:"voice-stream"})}}async function finalizeConversation(e,t){try{g.k.info("Finalizing conversation",{component:"voice-stream",encounterId:e,contextLength:t.length})}catch(e){g.k.error("Error finalizing conversation",e,{component:"voice-stream"})}}async function GET(e){try{if(initWebSocketServer(),"websocket"===e.headers.get("upgrade"))return new Response("WebSocket upgrade not supported in this environment",{status:400});return new Response("WebSocket endpoint",{status:200})}catch(e){return g.k.error("WebSocket handler error",e,{component:"voice-stream"}),new Response("Internal server error",{status:500})}}async function POST(e){try{let{audioData:t,type:n}=await e.json();if("audio_chunk"===n){let e=Buffer.from(t,"base64"),n=await (0,p.KR)(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)),o=new InterviewAgent,i=await o.processUserInput(n),r=i.response;i.nextQuestion&&!i.shouldEndInterview&&(r+=" "+i.nextQuestion);let s=await (0,l.FI)(r);return Response.json({type:"response",transcript:n,aiResponse:r,entities:i.entities,audioResponse:s.toString("base64")})}return Response.json({error:"Invalid request type"},{status:400})}catch(e){return g.k.error("Voice stream POST error",e,{component:"voice-stream"}),Response.json({error:"Internal server error"},{status:500})}}let I=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/voice/stream/route",pathname:"/api/voice/stream",filename:"route",bundlePath:"app/api/voice/stream/route"},resolvedPagePath:"/Users/israelwilson/Developer/rhiz-intent-mvp/apps/web/app/api/voice/stream/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:N,staticGenerationAsyncStorage:T,serverHooks:O,headerHooks:R,staticGenerationBailout:b}=I,C="/api/voice/stream/route"},1345:(e,t,n)=>{async function getUserId(){return"alice-user-id"}n.d(t,{n5:()=>getUserId})}};var t=require("../../../../webpack-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),n=t.X(0,[729,9155,8332,4589,7418,7552,4333,7058,786],()=>__webpack_exec__(57316));module.exports=n})();