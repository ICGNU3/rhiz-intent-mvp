"use strict";exports.id=5215,exports.ids=[5215],exports.modules={65215:(e,t,a)=>{a.d(t,{P:()=>Agent});var r=a(94192),n=a(68332),o=a(37058),s=a(37552);let Matching=class Matching{async findPeople(e,t,a){try{await (0,s.v8)(t);let r=await s.db.select().from(s.lB).where((0,s.xD)((0,s.eq)(s.lB.workspaceId,a),(0,s.eq)(s.lB.ownerId,t),s.i6`${s.lB.fullName} ILIKE ${"%"+e+"%"}`)).limit(10);return r}catch(e){return console.error("Error finding people:",e),[]}}async findPeopleByGoal(e,t,a){try{await (0,s.v8)(t);let r=await s.db.select({person:s.lB,claimRelevance:s.QS.confidence}).from(s.lB).leftJoin(s.QS,(0,s.xD)((0,s.eq)(s.QS.subjectId,s.lB.id),(0,s.eq)(s.QS.subjectType,"person"))).where((0,s.xD)((0,s.eq)(s.lB.workspaceId,a),(0,s.eq)(s.lB.ownerId,t),"raise_seed"===e?s.i6`${s.QS.key} IN ('investor', 'expertise', 'role') AND ${s.QS.value} ILIKE '%investor%' OR ${s.QS.value} ILIKE '%fund%'`:"hire_engineer"===e?s.i6`${s.QS.key} IN ('role', 'expertise') AND (${s.QS.value} ILIKE '%engineer%' OR ${s.QS.value} ILIKE '%developer%')`:"hire_designer"===e?s.i6`${s.QS.key} IN ('role', 'expertise') AND ${s.QS.value} ILIKE '%design%'`:s.i6`true`)).orderBy((0,s.C8)(s.QS.confidence)).limit(10);return r.map(e=>e.person)}catch(e){return console.error("Error finding people by goal:",e),[]}}async generateSuggestions(e,t,a,r,n){try{await (0,s.v8)(r);let o=await this.calculateMatchScore(e,t,a),i=await this.generateExplanation(e,t,a),[l]=await s.db.insert(s.Jz).values({workspaceId:n,ownerId:r,kind:"introduction",aId:e,bId:t,goalId:a,score:o.score,why:i,draft:null,state:"proposed"}).returning();return[l]}catch(e){return console.error("Error creating suggestion:",e),[]}}async calculateMatchScore(e,t,a){try{let[r,n]=await Promise.all([this.getPersonWithClaims(e),this.getPersonWithClaims(t)]);if(!r||!n)throw Error("Person not found");let o=await this.calculateRecencyScore(e,t),s=await this.calculateFrequencyScore(e,t),i=this.calculateAffiliationScore(r.claims,n.claims),l=this.calculateMutualInterestsScore(r.claims,n.claims),c=a?await this.calculateGoalAlignmentScore(r.claims,n.claims,a):0,u={recency:.15,frequency:.2,affiliation:.25,mutualInterests:.25,goalAlignment:a?.15:0},d=Math.round(o*u.recency+s*u.frequency+i*u.affiliation+l*u.mutualInterests+c*u.goalAlignment),p=this.calculateConfidence(r.claims,n.claims,null!==a);return{score:Math.max(1,Math.min(100,d)),factors:{recency:o,frequency:s,affiliation:i,mutualInterests:l,goalAlignment:c},confidence:p}}catch(e){return console.error("Error calculating match score:",e),{score:Math.floor(40*Math.random())+60,factors:{recency:Math.floor(100*Math.random()),frequency:Math.floor(100*Math.random()),affiliation:Math.floor(100*Math.random()),mutualInterests:Math.floor(100*Math.random()),goalAlignment:a?Math.floor(100*Math.random()):0},confidence:70}}}async getPersonWithClaims(e){let t=await s.db.select().from(s.lB).where((0,s.eq)(s.lB.id,e)).limit(1);if(0===t.length)return null;let a=await s.db.select().from(s.QS).where((0,s.xD)((0,s.eq)(s.QS.subjectType,"person"),(0,s.eq)(s.QS.subjectId,e)));return{...t[0],claims:a}}async calculateRecencyScore(e,t){let a=await s.db.select().from(s.i$).where((0,s.xD)(s.i6`(${s.i$.fromId} = ${e} AND ${s.i$.toId} = ${t}) OR (${s.i$.fromId} = ${t} AND ${s.i$.toId} = ${e})`,s.i6`${s.i$.createdAt} > NOW() - INTERVAL '90 days'`)).orderBy((0,s.C8)(s.i$.createdAt));if(0===a.length)return 20;let r=a[0],n=Math.floor((Date.now()-new Date(r.createdAt).getTime())/864e5);return Math.max(20,100-n)}async calculateFrequencyScore(e,t){let a=await s.db.select({count:s.i6`COUNT(*)`}).from(s.i$).where(s.i6`(${s.i$.fromId} = ${e} AND ${s.i$.toId} = ${t}) OR (${s.i$.fromId} = ${t} AND ${s.i$.toId} = ${e})`),r=a[0]?.count||0;return Math.min(100,10*r)}calculateAffiliationScore(e,t){let a=new Set(e.filter(e=>"company"===e.key).map(e=>e.value.toLowerCase())),r=new Set(t.filter(e=>"company"===e.key).map(e=>e.value.toLowerCase())),n=[...a].filter(e=>r.has(e));if(n.length>0)return 90;let o=new Set(e.filter(e=>"industry"===e.key||"expertise"===e.key).map(e=>this.extractIndustryKeywords(e.value))),s=new Set(t.filter(e=>"industry"===e.key||"expertise"===e.key).map(e=>this.extractIndustryKeywords(e.value))),i=[...o].filter(e=>s.has(e));return Math.min(70,20*i.length)}calculateMutualInterestsScore(e,t){let a=new Set(e.filter(e=>["interests","expertise","skills"].includes(e.key)).flatMap(e=>this.extractKeywords(e.value))),r=new Set(t.filter(e=>["interests","expertise","skills"].includes(e.key)).flatMap(e=>this.extractKeywords(e.value))),n=[...a].filter(e=>r.has(e));return Math.min(100,15*n.length)}async calculateGoalAlignmentScore(e,t,a){try{let r=await s.db.select().from(s.hS).where((0,s.eq)(s.hS.id,a)).limit(1);if(0===r.length)return 0;let n=r[0].kind;switch(n){case"raise_seed":return this.scoreForFundraisingGoal(e,t);case"hire_engineer":return this.scoreForHiringGoal(e,t,"engineer");case"hire_designer":return this.scoreForHiringGoal(e,t,"designer");case"find_customer":return this.scoreForCustomerGoal(e,t);default:return 50}}catch(e){return console.error("Error calculating goal alignment:",e),0}}scoreForFundraisingGoal(e,t){let hasInvestor=e=>e.some(e=>["role","title","company"].includes(e.key)&&e.value.toLowerCase().includes("investor")),hasFounder=e=>e.some(e=>["role","title"].includes(e.key)&&["founder","ceo","entrepreneur"].some(t=>e.value.toLowerCase().includes(t)));return hasInvestor(e)||hasInvestor(t)?95:hasFounder(e)&&hasFounder(t)?75:30}scoreForHiringGoal(e,t,a){let hasRole=(e,t)=>e.some(e=>["role","title","expertise"].includes(e.key)&&e.value.toLowerCase().includes(t)),hasHiringNeed=e=>e.some(e=>["role","title"].includes(e.key)&&["ceo","founder","hiring manager","hr"].some(t=>e.value.toLowerCase().includes(t)));return hasRole(e,a)&&hasHiringNeed(t)||hasRole(t,a)&&hasHiringNeed(e)?90:hasRole(e,a)||hasRole(t,a)?60:20}scoreForCustomerGoal(e,t){let isBusiness=e=>e.some(e=>["role","title","company"].includes(e.key)&&["ceo","founder","manager","director"].some(t=>e.value.toLowerCase().includes(t)));return isBusiness(e)&&isBusiness(t)?70:40}calculateConfidence(e,t,a){let r=Math.min(100,20*e.length),n=Math.min(100,20*t.length);return Math.min(100,(r+n)/2+(a?10:0))}extractIndustryKeywords(e){let t=e.toLowerCase();return["tech","finance","healthcare","education","retail","manufacturing"].find(e=>t.includes(e))||""}extractKeywords(e){let t=e.toLowerCase().split(/[\s,]+/).filter(e=>e.length>2).slice(0,10);return t}async generateExplanation(e,t,a){try{let[r,n]=await Promise.all([this.getPersonWithClaims(e),this.getPersonWithClaims(t)]);if(!r||!n)throw Error("Person not found");let o=[],i=[],l=r.claims.filter(e=>"company"===e.key).map(e=>e.value),c=n.claims.filter(e=>"company"===e.key).map(e=>e.value),u=l.filter(e=>c.some(t=>t.toLowerCase()===e.toLowerCase()));u.length>0&&o.push(`Both connected to ${u[0]}`);let d=r.claims.filter(e=>["role","title"].includes(e.key)).map(e=>e.value),p=n.claims.filter(e=>["role","title"].includes(e.key)).map(e=>e.value);if(a){let e=await s.db.select().from(s.hS).where((0,s.eq)(s.hS.id,a)).limit(1);if(e.length>0){let t=e[0].kind;if("raise_seed"===t){let e=[...d,...p].some(e=>e.toLowerCase().includes("investor"));e&&o.push("One person has investor experience relevant to fundraising")}if(t.includes("hire_")){let e=t.split("_")[1],a=[...d,...p].some(t=>t.toLowerCase().includes(e));a&&o.push(`One person has ${e} experience`)}}}let h=r.claims.filter(e=>["expertise","skills","interests"].includes(e.key)).flatMap(e=>this.extractKeywords(e.value)),m=n.claims.filter(e=>["expertise","skills","interests"].includes(e.key)).flatMap(e=>this.extractKeywords(e.value)),g=h.filter(e=>m.includes(e));i.push(...g.slice(0,3)),g.length>0&&o.push("Shared professional interests and expertise");let f=r.claims.filter(e=>"expertise"===e.key||"company"===e.key).map(e=>this.extractIndustryKeywords(e.value)).filter(Boolean),y=n.claims.filter(e=>"expertise"===e.key||"company"===e.key).map(e=>this.extractIndustryKeywords(e.value)).filter(Boolean),w=f.filter(e=>y.includes(e));w.length>0&&o.push(`Both active in ${w[0]} industry`);let I=d.some(e=>["founder","ceo","entrepreneur"].some(t=>e.toLowerCase().includes(t))),k=p.some(e=>["founder","ceo","entrepreneur"].some(t=>e.toLowerCase().includes(t)));return I&&k&&o.push("Both are founders/entrepreneurs - potential for peer learning"),0===o.length&&o.push("Professional network alignment based on career paths"),0===i.length&&i.push("Professional networking","Career development"),{reasons:o.slice(0,4),mutualInterests:i.slice(0,3),context:a?"Analyzed in context of your goal to find optimal connections":"Based on network analysis and professional alignment"}}catch(e){return console.error("Error generating explanation:",e),{reasons:["Professional network connection opportunity"],mutualInterests:["Networking","Professional development"],context:"Based on basic profile matching"}}}async getTopSuggestions(e,t,a=5){try{await (0,s.v8)(e);let r=await s.db.select({suggestion:s.Jz,personA:{id:s.lB.id,fullName:s.lB.fullName,primaryEmail:s.lB.primaryEmail}}).from(s.Jz).innerJoin(s.lB,(0,s.eq)(s.Jz.aId,s.lB.id)).where((0,s.xD)((0,s.eq)(s.Jz.workspaceId,t),(0,s.eq)(s.Jz.ownerId,e),(0,s.eq)(s.Jz.state,"proposed"))).orderBy((0,s.C8)(s.Jz.score)).limit(a),n=await Promise.all(r.map(async e=>{let t=await s.db.select({id:s.lB.id,fullName:s.lB.fullName,primaryEmail:s.lB.primaryEmail}).from(s.lB).where((0,s.eq)(s.lB.id,e.suggestion.bId)).limit(1);return{...e.suggestion,person_a:e.personA,person_b:t[0]||null}}));return n}catch(e){return console.error("Error getting top suggestions:",e),[]}}async acceptSuggestion(e){try{return await s.db.update(s.Jz).set({state:"accepted"}).where((0,s.eq)(s.Jz.id,e)),!0}catch(e){return console.error("Error accepting suggestion:",e),!1}}};var i=a(14333),l=a(66069);let c=n.Ry({people:n.IX(n.Ry({name:n.Z_().describe("Full name of the person"),role:n.Z_().optional().describe("Their job title or role"),company:n.Z_().optional().describe("Company they work at"),context:n.Z_().optional().describe("Context in which they were mentioned")})).optional(),goals:n.IX(n.Ry({kind:n.Km([l.IQ.RAISE_SEED,l.IQ.HIRE_ENGINEER,l.IQ.HIRE_DESIGNER,l.IQ.HIRE_SALES,l.IQ.FIND_INVESTOR,l.IQ.FIND_CUSTOMER,l.IQ.LEARN_SKILL,l.IQ.CONNECT]).describe("Type of goal"),title:n.Z_().describe("Human-readable goal title"),confidence:n.Rx().min(0).max(100).describe("Confidence score 0-100"),timeframe:n.Z_().optional().describe("When they want to achieve this"),requirements:n.IX(n.Z_()).optional().describe("Specific requirements or constraints")})).optional(),actions:n.IX(n.Km([l.aI.CAPTURE_NOTE,l.aI.SET_GOAL,l.aI.FIND_PEOPLE,l.aI.SUGGEST_INTROS,l.aI.SCHEDULE_FOLLOWUP,l.aI.ADD_REMINDER,l.aI.CLARIFY])).describe("What actions the user wants to take"),facts:n.IX(n.Ry({subject:n.Km(["person","org"]).describe("Whether this fact is about a person or organization"),key:n.Z_().describe("The type of fact (e.g., title, company, location)"),value:n.Z_().describe("The actual fact value"),confidence:n.Rx().min(0).max(100).optional().describe("Confidence in this fact")})).optional(),sentiment:n.Km([l.gi.POSITIVE,l.gi.NEUTRAL,l.gi.NEGATIVE]).optional().describe("Overall sentiment of the input"),urgency:n.Km([l.pJ.LOW,l.pJ.MEDIUM,l.pJ.HIGH]).optional().describe("How urgent this request is")}),u=n.Ry({text:n.Z_().describe("Natural language response to the user"),cards:n.Ry({people:n.IX(n.Ry({id:n.Z_(),name:n.Z_(),role:n.Z_().optional(),company:n.Z_().optional(),lastEncounter:n.Z_().optional(),actions:n.IX(n.Ry({label:n.Z_(),action:n.Z_(),data:n.IM(n.Yj())}))})).optional(),suggestions:n.IX(n.Ry({id:n.Z_(),score:n.Rx(),why:n.IX(n.Z_()),actions:n.IX(n.Ry({label:n.Z_(),action:n.Z_(),data:n.IM(n.Yj())}))})).optional(),goals:n.IX(n.Ry({id:n.Z_(),kind:n.Z_(),title:n.Z_(),status:n.Z_()})).optional()}).optional(),metadata:n.Ry({confidence:n.Rx().min(0).max(100).optional(),processingTime:n.Rx().optional(),modelUsed:n.Z_().optional()}).optional()});let Agent=class Agent{constructor(){this.failureCount=0,this.circuitBreakerOpen=!1,this.lastFailureTime=0,this.matching=new Matching}isCircuitBreakerOpen(){return!!this.circuitBreakerOpen&&(!(Date.now()-this.lastFailureTime>6e4)||(this.circuitBreakerOpen=!1,this.failureCount=0,!1))}recordFailure(){this.failureCount++,this.lastFailureTime=Date.now(),this.failureCount>=5&&(this.circuitBreakerOpen=!0,i.k.warn("Circuit breaker opened due to repeated failures",{component:"agent",failureCount:this.failureCount}))}recordSuccess(){this.failureCount=0,this.circuitBreakerOpen=!1}validateInput(e){if(!e||"string"!=typeof e)throw Error("Invalid input: text must be a non-empty string");let t=e.trim();if(0===t.length)throw Error("Invalid input: text cannot be empty");return t.length>5e4?(i.k.warn("Input text truncated due to length",{originalLength:t.length,maxLength:5e4}),t.substring(0,5e4)):t}async process(e,t){let a=Date.now();try{if(this.isCircuitBreakerOpen())return i.k.warn("Request rejected due to circuit breaker",{component:"agent"}),this.getFallbackResponse("Service temporarily unavailable. Please try again later.",a);let r=this.validateInput(e),n=await this.parseInput(r),s=await this.executeActions(n,t),l=await this.generateResponse(n,s,r);return this.recordSuccess(),{...l,metadata:{confidence:n.goals?.[0]?.confidence||75,processingTime:Date.now()-a,modelUsed:o.Cq.default?.toString()||"unknown"}}}catch(e){return this.recordFailure(),i.k.error("Agent processing error",e,{component:"agent",action:"process"}),this.getErrorResponse(e,a)}}getFallbackResponse(e,t){return{text:e,metadata:{confidence:0,processingTime:Date.now()-t,modelUsed:"fallback"}}}getErrorResponse(e,t){let a="I encountered an issue processing your request. Please try again.";return e.message.includes("Invalid input")?a="Please provide a valid message for me to process.":e.message.includes("timeout")?a="The request took too long to process. Please try again with a shorter message.":e.message.includes("rate limit")&&(a="I'm receiving too many requests right now. Please wait a moment and try again."),{text:a,metadata:{confidence:0,processingTime:Date.now()-t,modelUsed:"error"}}}async streamProcess(e,t,a){let r=Date.now();try{if(this.isCircuitBreakerOpen())return i.k.warn("Streaming request rejected due to circuit breaker",{component:"agent"}),this.getFallbackResponse("Service temporarily unavailable. Please try again later.",r);let n=this.validateInput(e),s=await this.parseInput(n),l=await this.executeActions(s,t),c=await this.streamResponse(s,l,n,a);return this.recordSuccess(),{text:c,cards:l.cards,metadata:{confidence:s.goals?.[0]?.confidence||75,processingTime:Date.now()-r,modelUsed:o.Cq.default?.toString()||"unknown"}}}catch(e){return this.recordFailure(),i.k.error("Agent streaming error",e,{component:"agent",action:"streamProcess"}),this.getErrorResponse(e,r)}}async parseInput(e){if(!o.Cq.default&&!o.Cq.backup)return i.k.debug("No AI model available, using fallback parsing",{component:"agent",action:"parseInput"}),this.fallbackParse(e);let t=[o.Cq.default,o.Cq.backup].filter(Boolean),a=null;for(let n of t)try{let{object:t}=await (0,r.jA)({model:n,schema:c,prompt:e,system:`You are a natural language parser for a networking assistant. Extract structured data from user input.

Key guidelines:
- Identify people mentioned (names, roles, companies)
- Detect goals and intents (fundraising, hiring, learning, connecting)
- Determine what actions the user wants to take
- Extract relevant facts about people and organizations
- Assess sentiment and urgency

Be thorough but accurate. If uncertain about something, set lower confidence scores.`}),a=this.validateParse(t);return a}catch(e){a=e,i.k.warn("AI parsing attempt failed, trying next model",{component:"agent",action:"parseInput",modelAttempted:n?.toString()||"unknown",error:e instanceof Error?e.message:String(e)})}return a&&i.k.error("All AI parsing attempts failed, using fallback",a,{component:"agent",action:"parseInput"}),this.fallbackParse(e)}validateParse(e){return e.actions&&0!==e.actions.length||(e.actions=["clarify"]),e.people&&(e.people=e.people.filter(e=>e.name&&e.name.trim().length>0)),e.goals&&(e.goals=e.goals.filter(e=>e.kind&&e.confidence>=0&&e.confidence<=100)),e.facts&&(e.facts=e.facts.filter(e=>e.key&&e.value&&e.subject)),e}async generateResponse(e,t,a){if(!o.Cq.default&&!o.Cq.backup)return{text:t.text||"I've processed your request.",cards:t.cards,metadata:t.metadata};let n=[o.Cq.default,o.Cq.backup].filter(Boolean);for(let o of n)try{let{object:n}=await (0,r.jA)({model:o,schema:u,prompt:`
Original user input: "${a}"

Parsed data:
- People: ${JSON.stringify(e.people||[])}
- Goals: ${JSON.stringify(e.goals||[])}
- Actions: ${JSON.stringify(e.actions)}
- Facts: ${JSON.stringify(e.facts||[])}
- Sentiment: ${e.sentiment||"neutral"}
- Urgency: ${e.urgency||"medium"}

Action results: ${JSON.stringify(t)}

Generate a natural, helpful response that:
1. Acknowledges what the user said
2. Explains what you've done or will do
3. Provides relevant cards/actions
4. Maintains a professional but friendly tone
5. Addresses any urgency or sentiment appropriately
`,system:"You are a helpful networking assistant. Generate natural, actionable responses that help users manage their professional relationships and achieve their goals."}),s=this.validateAgentResponse(n,t);return s}catch(e){i.k.warn("Response generation failed, trying next model",{component:"agent",action:"generateResponse",modelAttempted:o?.toString()||"unknown",error:e instanceof Error?e.message:String(e)})}return i.k.error("All response generation attempts failed, using fallback",void 0,{component:"agent",action:"generateResponse"}),{text:t.text||"I've processed your request and here's what I found.",cards:t.cards,metadata:t.metadata}}validateAgentResponse(e,t){return e.text&&0!==e.text.trim().length||(e.text=t.text||"I've processed your request."),!e.cards&&t.cards&&(e.cards=t.cards),e.metadata||(e.metadata=t.metadata),e}async streamResponse(e,t,a,n){if(!o.Cq.default&&!o.Cq.backup){let e=t.text||"I've processed your request.";if(n)for(let t of e)n(t),await new Promise(e=>setTimeout(e,20));return e}let s=[o.Cq.default,o.Cq.backup].filter(Boolean);for(let o of s)try{let{textStream:s}=await (0,r.kP)({model:o,prompt:`
Original user input: "${a}"

Parsed data:
- People: ${JSON.stringify(e.people||[])}
- Goals: ${JSON.stringify(e.goals||[])}
- Actions: ${JSON.stringify(e.actions)}
- Sentiment: ${e.sentiment||"neutral"}
- Urgency: ${e.urgency||"medium"}

Action results: ${JSON.stringify(t)}

Generate a natural, helpful response that acknowledges what the user said and explains what you've done or will do. Keep it conversational and actionable.`,system:"You are a helpful networking assistant. Generate natural, actionable responses that help users manage their professional relationships and achieve their goals."}),l="",c=0;for await(let e of s){if(c++,l+=e,c>1e3||l.length>1e5){i.k.warn("Stream truncated due to size limits",{chunkCount:c,responseLength:l.length});break}n&&n(e)}return l||t.text||"I've processed your request."}catch(e){i.k.warn("Streaming failed, trying next model",{component:"agent",action:"streamResponse",modelAttempted:o?.toString()||"unknown",error:e instanceof Error?e.message:String(e)})}i.k.error("All streaming attempts failed, using fallback",void 0,{component:"agent",action:"streamResponse"});let l=t.text||"I've processed your request.";if(n)for(let e of l)n(e),await new Promise(e=>setTimeout(e,20));return l}fallbackParse(e){let t=e.toLowerCase(),a=this.extractPeople(e),r=this.extractGoals(t),n=this.extractActions(t),o=this.extractFacts(t);return{people:a,goals:r,actions:n,facts:o}}extractPeople(e){let t=e.match(/\b[A-Z][a-z]+ [A-Z][a-z]+\b/g);return t?t.map(e=>({name:e,role:void 0,company:void 0,context:void 0})):[]}extractGoals(e){let t=[];return(e.includes("seed")||e.includes("seed round")||e.includes("fundraising"))&&t.push({kind:"raise_seed",title:"Raise seed round",confidence:90}),(e.includes("hire")||e.includes("hiring"))&&(e.includes("engineer")||e.includes("developer")?t.push({kind:"hire_engineer",title:"Hire engineer",confidence:85}):e.includes("designer")?t.push({kind:"hire_designer",title:"Hire designer",confidence:85}):e.includes("sales")&&t.push({kind:"hire_sales",title:"Hire sales person",confidence:85})),(e.includes("investor")||e.includes("funding"))&&t.push({kind:"find_investor",title:"Find investor",confidence:80}),t}extractActions(e){let t=[];return(e.includes("introduce")||e.includes("intro"))&&t.push("suggest_intros"),(e.includes("met")||e.includes("talked")||e.includes("spoke")||e.includes("discussed"))&&t.push("capture_note"),(e.includes("goal")||e.includes("raise")||e.includes("hire")||e.includes("find"))&&t.push("set_goal"),(e.includes("who")||e.includes("find")||e.includes("looking for")||e.includes("know anyone"))&&t.push("find_people"),(e.includes("follow up")||e.includes("followup")||e.includes("remind"))&&t.push("schedule_followup"),0===t.length&&t.push("clarify"),t}extractFacts(e){let t;let a=[],r=/(?:at|from|with) ([A-Z][a-zA-Z\s&]+)/g;for(;null!==(t=r.exec(e));)a.push({subject:"org",key:"company",value:t[1].trim(),confidence:70});return a}async executeActions(e,t){let a=[];for(let r of e.actions){let n=await this.executeAction(r,e,t);a.push(n)}return this.combineResponses(a)}async executeAction(e,t,a){switch(e){case"capture_note":return this.captureNote(t);case"set_goal":return this.setGoal(t);case"find_people":return this.findPeople(t);case"suggest_intros":return this.suggestIntros(t);case"schedule_followup":return this.scheduleFollowup(t);case"clarify":return this.clarify(t);default:return{text:"I'm not sure how to help with that. Could you clarify?"}}}async captureNote(e){let t=e.people||[],a=e.facts||[],r="I've captured that note.";return t.length>0&&(r+=` I've linked it to ${t.map(e=>e.name).join(", ")}.`),a.length>0&&(r+=" I've also noted some facts about their roles and companies."),{text:r,cards:{people:t.map(e=>({id:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`,name:e.name,role:e.role,company:e.company,lastEncounter:"Just now",actions:[{label:"Add note",action:"add_note",data:{personId:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`}},{label:"Intro with...",action:"intro_with",data:{personId:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`}},{label:"Schedule follow-up",action:"schedule_followup",data:{personId:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`}}]}))}}}async setGoal(e){let t=e.goals||[];if(0===t.length)return{text:"What kind of goal would you like to set? For example: 'I want to raise a seed round' or 'I need to hire a React engineer'."};let a=t[0];return{text:`I've set a goal for you: ${a.title}. I'll help you track progress and find relevant connections.`,cards:{goals:[{id:`goal-${a.kind}`,kind:a.kind,title:a.title||a.kind,status:"active"}]}}}async findPeople(e){return{text:"Here are some people in your network who might be relevant:",cards:{people:[{id:"sarah-chen",name:"Sarah Chen",role:"CTO",company:"Stripe",lastEncounter:"2 days ago",actions:[{label:"Open",action:"open_person",data:{personId:"sarah-chen"}},{label:"Add note",action:"add_note",data:{personId:"sarah-chen"}},{label:"Intro with...",action:"intro_with",data:{personId:"sarah-chen"}}]}]}}}async suggestIntros(e){let t=await this.matching.getTopSuggestions("demo-user","mock-workspace-1",3),a=t.map(e=>({id:e.id,score:e.score,why:e.why?.reasons||["Based on network analysis"],actions:[{label:"Draft intro",action:"draft_intro",data:{suggestionId:e.id}},{label:"Accept",action:"accept_suggestion",data:{suggestionId:e.id}}]}));return{text:"Here are some introduction suggestions based on your network:",cards:{suggestions:a}}}async scheduleFollowup(e){let t=e.people||[];return 0===t.length?{text:"Who would you like me to schedule a follow-up with?"}:{text:`I've scheduled a follow-up reminder for ${t.map(e=>e.name).join(", ")}. I'll notify you when it's time to reach out.`,cards:{people:t.map(e=>({id:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`,name:e.name,role:e.role,company:e.company,lastEncounter:"Just now",actions:[{label:"View reminder",action:"view_reminder",data:{personId:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`}},{label:"Reschedule",action:"reschedule_followup",data:{personId:`person-${e.name.toLowerCase().replace(/\s+/g,"-")}`}}]}))}}}async clarify(e){let t=["What specific help are you looking for?","Are you looking to meet someone new or follow up with existing contacts?","What's your timeline for this?","What industry or role are you focusing on?"];return{text:`I'd like to help you better. ${t[Math.floor(Math.random()*t.length)]}`}}combineResponses(e){if(0===e.length)return{text:"I'm not sure how to help with that."};if(1===e.length)return e[0];let t=e.map(e=>e.text).filter(Boolean).join(" "),a={people:e.map(e=>e.cards?.people).filter(Boolean).flat().filter(e=>void 0!==e),suggestions:e.map(e=>e.cards?.suggestions).filter(Boolean).flat().filter(e=>void 0!==e),goals:e.map(e=>e.cards?.goals).filter(Boolean).flat().filter(e=>void 0!==e)};return{text:t,cards:a}}}}};