"use strict";exports.id=9240,exports.ids=[9240],exports.modules={29240:(e,t,o)=>{o.r(t),o.d(t,{GET:()=>GET,broadcastSystemNotification:()=>broadcastSystemNotification,broadcastToUser:()=>broadcastToUser,broadcastToWorkspace:()=>broadcastToWorkspace,getConnectionStats:()=>getConnectionStats,initWebSocketServer:()=>initWebSocketServer});var a=o(95798),n=o(27418);let r=null,s=new Map,c=new Map;async function GET(e){return a.Z.json({error:"WebSocket upgrade required"},{status:426})}function initWebSocketServer(e){return r||(r=new n.u9({server:e,path:"/api/ws"})).on("connection",async(e,t)=>{console.log("New WebSocket connection"),e.on("message",async t=>{try{let o=JSON.parse(t.toString());await handleWebSocketMessage(e,o)}catch(t){console.error("WebSocket message error:",t),e.send(JSON.stringify({error:"Invalid message format"}))}}),e.on("close",()=>{let t=c.get(e);if(t){let o=s.get(t);o&&(o.delete(e),0===o.size&&s.delete(t)),c.delete(e)}console.log("WebSocket connection closed")}),e.on("error",e=>{console.error("WebSocket error:",e)})}),r}async function handleWebSocketMessage(e,t){let{type:o,payload:a}=t;switch(o){case"auth":await handleAuth(e,a);break;case"join_workspace":await handleJoinWorkspace(e,a);break;case"leave_workspace":await handleLeaveWorkspace(e,a);break;case"heartbeat":e.send(JSON.stringify({type:"heartbeat",timestamp:Date.now()}));break;default:e.send(JSON.stringify({error:`Unknown message type: ${o}`}))}}async function handleAuth(e,t){try{let{token:o,userId:a}=t;if(!a){e.send(JSON.stringify({error:"Authentication failed"}));return}c.set(e,a),s.has(a)||s.set(a,new Set),s.get(a).add(e),e.send(JSON.stringify({type:"auth_success",userId:a,timestamp:Date.now()})),console.log(`User ${a} authenticated via WebSocket`)}catch(t){console.error("Auth error:",t),e.send(JSON.stringify({error:"Authentication failed"}))}}async function handleJoinWorkspace(e,t){let o=c.get(e);if(!o){e.send(JSON.stringify({error:"Not authenticated"}));return}let{workspaceId:a}=t;e.workspaceId=a,e.send(JSON.stringify({type:"workspace_joined",workspaceId:a,timestamp:Date.now()})),broadcastToWorkspace(a,{type:"user_joined",userId:o,timestamp:Date.now()},o)}async function handleLeaveWorkspace(e,t){let o=c.get(e),{workspaceId:a}=t;e.workspaceId===a&&(e.workspaceId=null,broadcastToWorkspace(a,{type:"user_left",userId:o,timestamp:Date.now()},o))}function broadcastToWorkspace(e,t,o){r&&r.clients.forEach(a=>{if(a.readyState===a.OPEN&&a.workspaceId===e){let e=c.get(a);o&&e===o||a.send(JSON.stringify(t))}})}function broadcastToUser(e,t){let o=s.get(e);o&&o.forEach(e=>{e.readyState===e.OPEN&&e.send(JSON.stringify(t))})}function broadcastSystemNotification(e){r&&r.clients.forEach(t=>{t.readyState===t.OPEN&&t.send(JSON.stringify({type:"system_notification",...e,timestamp:Date.now()}))})}function getConnectionStats(){return{totalConnections:r?r.clients.size:0,userConnections:s.size,workspaceConnections:Array.from(r?.clients||[]).reduce((e,t)=>(t.workspaceId&&(e[t.workspaceId]=(e[t.workspaceId]||0)+1),e),{})}}}};